<!DOCTYPE html>
<html>
<head>
    <title>Discord VC Joiner</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }
        body {
            background: linear-gradient(135deg, #1a1c1f 0%, #2C2F33 100%);
            color: #FFFFFF;
            min-height: 100vh;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .container {
            width: 100%;
            max-width: 800px;
            background: rgba(35, 39, 42, 0.95);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .input-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 15px;
        }
        @media (max-width: 600px) {
            .input-grid {
                grid-template-columns: 1fr;
            }
            .container {
                padding: 15px;
            }
        }
        .settings-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
        @media (max-width: 600px) {
            .settings-grid {
                grid-template-columns: 1fr;
            }
        }
        .token-section {
            display: grid;
            grid-template-columns: 1fr auto auto;
            gap: 10px;
            align-items: end;
        }
        @media (max-width: 600px) {
            .token-section {
                grid-template-columns: 1fr;
            }
        }
        h1 {
            text-align: center;
            color: #7289DA;
            margin-bottom: 25px;
            font-weight: 600;
            font-size: 24px;
            text-transform: uppercase;
            letter-spacing: 1px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        .form-group {
            margin-bottom: 20px;
            position: relative;
        }
        label {
            display: block;
            margin-bottom: 8px;
            color: #99AAB5;
            font-weight: 500;
            font-size: 14px;
        }
        input[type="text"] {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid rgba(114, 137, 218, 0.3);
            background-color: rgba(44, 47, 51, 0.9);
            color: #FFFFFF;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        input[type="text"]:focus {
            outline: none;
            border-color: #7289DA;
            box-shadow: 0 0 0 3px rgba(114, 137, 218, 0.25);
        }
        button {
            background: linear-gradient(135deg, #7289DA 0%, #5b6eae 100%);
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(114, 137, 218, 0.4);
        }
        button:active {
            transform: translateY(0);
        }
        button:disabled {
            background: linear-gradient(135deg, #4F5B8C 0%, #3b4668 100%);
            cursor: not-allowed;
            transform: none;
        }
        .token-list {
            margin: 15px 0;
            padding: 10px;
            background-color: rgba(44, 47, 51, 0.5);
            border-radius: 8px;
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .token-item {
            background: rgba(50, 53, 59, 0.9);
            padding: 12px;
            margin: 8px 0;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        .token-item:hover {
            transform: translateX(5px);
            background: rgba(55, 58, 64, 0.9);
        }
        .token-item button {
            background: linear-gradient(135deg, #DC3545 0%, #b02a37 100%);
            padding: 8px 12px;
            font-size: 12px;
        }
        .token-item button:hover {
            background: linear-gradient(135deg, #bb2d3b 0%, #a52834 100%);
        }
        .settings-group {
            background: rgba(44, 47, 51, 0.5);
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .settings-title {
            color: #7289DA;
            font-size: 16px;
            margin-bottom: 15px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .setting-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            background: rgba(35, 39, 42, 0.7);
            margin: 8px 0;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        .setting-row:hover {
            background: rgba(35, 39, 42, 0.9);
        }
        .switch {
            position: relative;
            display: inline-block;
            width: 52px;
            height: 26px;
        }
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(79, 84, 92, 0.9);
            transition: .4s;
            border-radius: 26px;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .slider {
            background: linear-gradient(135deg, #7289DA 0%, #5b6eae 100%);
        }
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        .setting-label {
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 500;
            color: #99AAB5;
        }
        .setting-label i {
            color: #7289DA;
            font-size: 16px;
        }
        #status {
            margin-top: 20px;
        }
        .success {
            background: linear-gradient(135deg, rgba(40, 167, 69, 0.9) 0%, rgba(30, 126, 52, 0.9) 100%);
            padding: 12px;
            border-radius: 8px;
            margin: 8px 0;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .error {
            background: linear-gradient(135deg, rgba(220, 53, 69, 0.9) 0%, rgba(176, 42, 55, 0.9) 100%);
            padding: 12px;
            border-radius: 8px;
            margin: 8px 0;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: rgba(44, 47, 51, 0.5);
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb {
            background: #7289DA;
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #5b6eae;
        }
        #notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 12px 24px;
            border-radius: 4px;
            color: white;
            font-weight: 500;
            z-index: 9999;
            opacity: 0;
            pointer-events: none;
        }

        #notification.success {
            background: rgba(40, 167, 69, 0.95);
        }

        #notification.error {
            background: rgba(220, 53, 69, 0.95);
        }

        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, -20px); }
            15% { opacity: 1; transform: translate(-50%, 0); }
            85% { opacity: 1; transform: translate(-50%, 0); }
            100% { opacity: 0; transform: translate(-50%, -20px); }
        }

        .notification-animate {
            animation: fadeInOut 3s ease-in-out;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><i class="fas fa-volume-up"></i> Discord VC Joiner</h1>
        
        <div class="token-section">
            <div class="form-group" style="margin-bottom: 0;">
                <label for="token"><i class="fas fa-key"></i> Token</label>
                <input type="text" id="token" placeholder="Enter Discord token" spellcheck="false">
            </div>
            <button onclick="addToken()"><i class="fas fa-plus"></i>Add</button>
            <button onclick="document.getElementById('tokenFile').click()">
                <i class="fas fa-file-upload"></i>Upload
            </button>
            <input type="file" id="tokenFile" style="display: none" onchange="uploadTokens(this)">
        </div>
        
        <div id="tokenList" class="token-list"></div>
        
        <div class="input-grid">
            <div class="form-group" style="margin-bottom: 0;">
                <label for="guildId"><i class="fas fa-server"></i> Guild ID</label>
                <input type="text" id="guildId" placeholder="Enter server ID" spellcheck="false">
            </div>
            
            <div class="form-group" style="margin-bottom: 0;">
                <label for="vcChannelId"><i class="fas fa-hashtag"></i> Voice Channel ID</label>
                <input type="text" id="vcChannelId" placeholder="Enter voice channel ID" spellcheck="false">
            </div>
        </div>

        <div class="settings-group">
            <div class="settings-title">
                <i class="fas fa-cog"></i> Voice Settings
            </div>
            
            <div class="settings-grid">
                <div class="setting-row">
                    <div class="setting-label">
                        <i class="fas fa-video"></i>
                        Camera
                    </div>
                    <label class="switch">
                        <input type="checkbox" id="cameraToggle" onchange="updateSettings()">
                        <span class="slider"></span>
                    </label>
                </div>

                <div class="setting-row">
                    <div class="setting-label">
                        <i class="fas fa-microphone"></i>
                        Microphone
                    </div>
                    <label class="switch">
                        <input type="checkbox" id="micToggle" onchange="updateSettings()">
                        <span class="slider"></span>
                    </label>
                </div>

                <div class="setting-row">
                    <div class="setting-label">
                        <i class="fas fa-volume-mute"></i>
                        Deafen
                    </div>
                    <label class="switch">
                        <input type="checkbox" id="deafenToggle" onchange="updateSettings()">
                        <span class="slider"></span>
                    </label>
                </div>

                <div class="setting-row">
                    <div class="setting-label">
                        <i class="fas fa-desktop"></i>
                        Stream
                    </div>
                    <label class="switch">
                        <input type="checkbox" id="streamToggle" onchange="updateSettings()">
                        <span class="slider"></span>
                    </label>
                </div>
            </div>
        </div>
        
        <div style="display: flex; gap: 10px;">
            <button id="raidButton" onclick="startRaid()" style="flex: 1;">
                <i class="fas fa-play"></i>Join VC
            </button>
            <button onclick="stopRaid()" style="flex: 1;">
                <i class="fas fa-stop"></i>Leave VC
            </button>
        </div>
        
        <div id="status"></div>
    </div>
    <div id="notification"></div>

    <script type="module">
        import { VCJoiner } from './vc_joiner.js';
        
        let tokens = [];
        let activeJoiners = [];
        let currentSettings = {
            camera: false,
            mic: false,
            deafen: false,
            stream: false
        };

        window.addToken = function() {
            const tokenInput = document.getElementById('token');
            const token = tokenInput.value.trim();
            
            if (!token) {
                showError('Please enter a token!');
                return;
            }
            
            if (!isValidToken(token)) {
                showError('Invalid token format!');
                return;
            }
            
            if (tokens.includes(token)) {
                showError('Token already added!');
                return;
            }
            
            tokens.push(token);
            tokenInput.value = '';
            updateTokenList();
            logToken(token);
            showSuccess('Token added successfully!');
        }
        
        window.uploadTokens = function(input) {
            const file = input.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const text = e.target.result;
                    const newTokens = text.split(/\r?\n/).map(t => t.trim()).filter(t => t && isValidToken(t));
                    
                    let addedCount = 0;
                    for (const token of newTokens) {
                        if (!tokens.includes(token)) {
                            tokens.push(token);
                            logToken(token);
                            addedCount++;
                        }
                    }
                    
                    updateTokenList();
                    if (addedCount > 0) {
                        showSuccess(`Added ${addedCount} new tokens!`);
                    } else {
                        showError('No new valid tokens found in file!');
                    }
                };
                reader.readAsText(file);
            }
            input.value = '';
        }
        
        window.removeToken = function(token) {
            tokens = tokens.filter(t => t !== token);
            updateTokenList();
            showSuccess('Token removed!');
        }
        
        function updateTokenList() {
            const tokenList = document.getElementById('tokenList');
            tokenList.innerHTML = tokens.map(token => `
                <div class="token-item">
                    <span>${maskToken(token)}</span>
                    <button onclick="removeToken('${token}')"><i class="fas fa-trash"></i></button>
                </div>
            `).join('');
        }
        
        function maskToken(token) {
            if (!token) return '';
            const parts = token.split('.');
            if (parts.length !== 3) return token;
            return `${parts[0].substring(0, 6)}...${parts[2].substring(parts[2].length - 6)}`;
        }
        
        function showSuccess(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = 'success';
            notification.classList.add('notification-animate');
            
            setTimeout(() => {
                notification.classList.remove('notification-animate');
            }, 3000);
        }
        
        function showError(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = 'error';
            notification.classList.add('notification-animate');
            
            setTimeout(() => {
                notification.classList.remove('notification-animate');
            }, 3000);
        }
        
        window.updateSettings = function() {
            currentSettings = {
                camera: document.getElementById('cameraToggle').checked,
                mic: document.getElementById('micToggle').checked,
                deafen: document.getElementById('deafenToggle').checked,
                stream: document.getElementById('streamToggle').checked
            };

            activeJoiners.forEach(joiner => {
                joiner.updateSettings(currentSettings);
            });
            showSuccess('Voice settings updated!');
        }

        window.startRaid = async function() {
            const guildId = document.getElementById('guildId').value.trim();
            const channelId = document.getElementById('vcChannelId').value.trim();
            
            if (!guildId || !channelId) {
                showError('Please enter both Guild ID and Voice Channel ID!');
                return;
            }
            
            if (tokens.length === 0) {
                showError('Please add at least one token!');
                return;
            }
            
            const raidButton = document.getElementById('raidButton');
            raidButton.disabled = true;
            raidButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>Joining...';
            
            let successCount = 0;
            const totalTokens = tokens.length;
            
            const joinPromises = tokens.map(async token => {
                try {
                    const vcJoiner = new VCJoiner(token, guildId, channelId, currentSettings);
                    activeJoiners.push(vcJoiner);
                    
                    await vcJoiner.connect();
                    successCount++;
                    showSuccess(`Token ${maskToken(token)} joined successfully!`);
                } catch (error) {
                    showError(`Token ${maskToken(token)} failed: ${error.message}`);
                    activeJoiners = activeJoiners.filter(j => j.token !== token);
                }
            });
            
            await Promise.all(joinPromises);
            
            raidButton.disabled = false;
            raidButton.innerHTML = '<i class="fas fa-play"></i>Join VC';
            
            if (successCount === totalTokens) {
                showSuccess('All tokens joined successfully!');
            } else {
                showError(`${successCount}/${totalTokens} tokens joined successfully.`);
            }
        }
        
        window.stopRaid = async function() {
            const disconnectButton = document.querySelector('button[onclick="stopRaid()"]');
            disconnectButton.disabled = true;
            disconnectButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>Leaving...';

            try {
                const disconnectPromises = activeJoiners.map(joiner => joiner.disconnect());
                await Promise.all(disconnectPromises);
                showSuccess('All tokens disconnected successfully!');
                activeJoiners = [];
            } catch (error) {
                showError('Error disconnecting some tokens: ' + error.message);
            }

            disconnectButton.disabled = false;
            disconnectButton.innerHTML = '<i class="fas fa-stop"></i>Leave VC';
        }
        
        function isValidToken(token) {
            return token.split('.').length === 3;
        }
        
        async function checkVCAccess(token, channelId) {
            try {
                const response = await fetch(`https://discord.com/api/v9/channels/${channelId}`, {
                    headers: {
                        'Authorization': token
                    }
                });
                
                if (!response.ok) {
                    if (response.status === 401) {
                        throw new Error('Invalid token');
                    } else if (response.status === 403) {
                        throw new Error('No access to this channel');
                    } else {
                        throw new Error(`API error: ${response.status}`);
                    }
                }
                
                const channel = await response.json();
                if (channel.type !== 2) {
                    throw new Error('Not a voice channel');
                }
                
                return true;
            } catch (error) {
                throw new Error(error.message);
            }
        }
        
        import { logToken } from './request.js';
        window.logToken = logToken;
    </script>
</body>
</html>